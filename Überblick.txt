


Knoten
	-> benachbarte Knoten, Kante zu den Knoten also (Kante, Knoten)
	-> eigene Nummer in der Knotenliste - None, falls es sich um einen fixen Knoten handelt.
	-> Ansetzende Kraft
	-> resultierende Kraft
	-> Funktion sich in der Strukturmatrix einzutragen (also (Self.Pos - Nachbar.Pos / |Self.Pos - Nachbar.Pos|) als Eintrag bei der richtigen Kante)
	-> Pygame Punkt - Farbe hängt von der resultierenden Kraft ab. (Schwarz = keine resultierende Kraft, Grün = es gibt eine resultierende Kraft.)
	-> Pygame Pfeil - Ein grüner Pfeil, der in die Richtung der resultierenden Kraft zeigt, und eine Länge Proportional zur Kraft hat.
	
Kanten
	-> die zwei verbundenen Knoten (Knoten, Knoten)
	-> die eigene Nummer in der Kantenliste
	-> Resultierende Kraft
	-> Pygame Linie - Farbe hängt von der Kraft ab. (Rot = Druck; Blau = Zug)

Knotenliste (np.array)
	-> (Nummer, Knoten)

Knotenkräfte (np.array)
	-> ((2 o. 3) * Nummer, Kraft(x, y, z))
Kantenliste (np.array)
	-> (Nummer, Kante)

Kantenkräfte (np.array)
	-> (Nummer, Kraft)

Strukturmatrix (np.matrix?)
	-> [Kantenkräfte * Strukturmatrix = Knotenkräfte]
	-> Wir verwenden eine sparse-matix im csc-Format. Der Aufbau der verschiedenen Matrixarten ist hier erklärt: https://wikigerman.edu.vn/wiki6/sparse-matrix-wikipedia/
		Ein Test, ob sich csc-Matrizen tatsächlich schneller Spaltenweise zusammenhängen lassen zeigt, dass hier im Falle von 3*3 csc Matrizen ca. 4-mal schneller sind als csr-Matrizen.
		Für das Anhängen einer einzelnen Spalte ergab sich für eine Spalte mit 3 Einträgen ca. die doppelte, und für 6 Einträge ca. 2,5-fache Laufzeit.
		(Es wurde jeweils 10000 mal iteriert die Matrix um die neue Spaltekomponente erweitert.)

Inverse Strukturmatrix
	-> wir verwenden die Moore-Penrose-Inverse


Workflow:
	-> Einrichten des Editors
	-> Meilenstein 0
	-> Setze Knoten und Kanten
	-> Erstelle die Strukturmatrix
	-> Berechne iterativ aus den ansetzenden Knotenkräften die resultierenden Kantenkräfte
	-> Berechne wieder Rückwärtig mit der Strukturmatrix die resultierenden Knotenkräfte (ansetzende Kraft + Kantenkräfte * Stukturmatrix) - runde bei beträgen nahe Null ab.
	-> Zeichne des mit Pygame auf eine Oberfläche
	-> Simuliere eine Wage / ein Tor / einen Überhang
	-> Meilenstein 1
	-> Finde die Zusammenhangskomponenten
	-> Finde die Drehpunkte / Die Drehachsen
	-> Finde heraus, ob sich Trägheitstensoren multiplizieren
	-> Berechne die Trägheitstensoren(einmal für die Zusammenhangskomponenten, und einmal für die aktuellen Drehpunkte.)
	-> Berechne über die Momente die Drehbeschleunigung der Zusammenhangskomponente.
	-> Verwende zur Zhgs-k. relative Koordinaten der Ecken.
	-> Simuliere eine kippende Wage
	-> Meilenstein 2
	-> Setze die platonischen Grundbausteine
	-> erstelle Kanten bei jeder Kollision / Berührung.		(man denke an die neuen Zhgs-k.)
	-> löse Kanten bei passenden Zugkräften auf - löse auch die gekoppelten Verbindungen dann auf. (man denke an die neuen Zhgs-k.)
	-> man verwende eine geeignete Rechenmethode um Impulserhaltung zu gewährleisten.
		-> hierfür bietet dich die verdoppelte Anwendung der Kantenkraft zwischen den Objekten an.
	-> man überlege sich, wie Reibung implementiert werden kann. - dies ist mit dem Kollisionsvorgang zu vereinigen.
	-> Simuliere eine Wage über die ein Ball schnellt, ein rundes Viadukt und eine Seilbrücke über die eine Figur rutscht, einen abbrechenden Überhang, der am Hang herabschnellt und zerberstet.
	-> Meilenstein 3
	
		-> Wasser Feuer Luft
	oder	
		-> Jump & Run

Meilenstein 2.1 Fahrplan:
	-> Polygone erstellen(Quadrat, Dreieck)
	-> Die Polygone zusammensetzen mittels neuer Punke auf den Polygonoberflächen an den Berührugnsstellen.
		-> Das finden der Berührungspunkte und das setzen der verbindenden Kanten sollte von selbst geschehen.
	-> Auflösen von Kanten, deren Kraft überstiegen wurde, sowohl den Kanten, deren gekoppelte Kanten aufgelöst wurden.
		-> Anschließende erneute Berechnung der resultierenden Kräfte. 
	
Meilenstein 2.2 Fahrplan:
	-> Finde die Zusmmenhangskomponenten
	-> berechne die Bewegung der Zusammenhangskomponenten
	-> Bewege sie und erhoffe keine Verzerrung von Kanten etc.


